/**
 * ÊÑüÊÉ≥Êà¶„É¢„Éº„Éâ„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà
 * „Ç≤„Éº„É†ÁµÇ‰∫ÜÂæå„ÅÆÊåØ„ÇäËøî„ÇäÁîªÈù¢Ôºö‰∏°ËÄÖ„ÅÆËø∑Ë∑ØÂÖ®‰ΩìÂõ≥„ÄÅÈÄö„Å£„ÅüÂ†¥ÊâÄ„ÄÅ„Éü„Çπ„Åó„ÅüÂ†¥ÊâÄ„ÅÆÁ¢∫Ë™ç
 */

import React, { useState, useEffect, useRef } from 'react';
import { ArrowLeft, Eye, Map, MessageSquare, RotateCcw, Send, Users } from 'lucide-react';
import { collection, addDoc, query, orderBy, limit, onSnapshot, serverTimestamp } from 'firebase/firestore';
import { db, appId } from '../firebase';
import { getUsername } from '../utils';
import MazeGrid from './MazeGrid';

/**
 * ÊÑüÊÉ≥Êà¶„É¢„Éº„Éâ„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà
 * @param {Object} gameData - „Ç≤„Éº„É†„Éá„Éº„Çø
 * @param {Object} mazeData - Ëá™ÂàÜ„ÅåÊîªÁï•„Åó„ÅüËø∑Ë∑Ø„Éá„Éº„Çø
 * @param {Object} allMazeData - ÂÖ®„Éó„É¨„Ç§„É§„Éº„ÅÆËø∑Ë∑Ø„Éá„Éº„Çø
 * @param {string} userId - ÁèæÂú®„ÅÆ„É¶„Éº„Ç∂„ÉºID
 * @param {Function} onExit - ÊÑüÊÉ≥Êà¶„É¢„Éº„Éâ„ÇíÁµÇ‰∫Ü„Åô„ÇãÈñ¢Êï∞
 */
const ReviewModeScreen = ({ gameData, mazeData, allMazeData = {}, userId, onExit }) => {
    const [selectedView, setSelectedView] = useState('both'); // 'both', 'player1', 'player2'
    const [chatMessages, setChatMessages] = useState([]);
    const [chatInput, setChatInput] = useState("");
    const chatLogRef = useRef(null);
    
    const currentUserName = getUsername() || "Êú™Ë®≠ÂÆö„É¶„Éº„Ç∂„Éº";
    const players = gameData.players || [];
    
    // ÂàùÊúüË°®Á§∫„ÅØËá™ÂàÜ„ÅåÊîªÁï•„Åó„ÅüËø∑Ë∑Ø„ÄÅ„Å™„Åë„Çå„Å∞ÊúÄÂàù„ÅÆ„Éó„É¨„Ç§„É§„Éº„ÅÆËø∑Ë∑Ø
    const [selectedMazeOwner, setSelectedMazeOwner] = useState(() => {
        const myPlayerState = gameData.playerStates?.[userId];
        return myPlayerState?.assignedMazeOwnerId || players[0] || userId;
    });
    
    // ÁèæÂú®Ë°®Á§∫‰∏≠„ÅÆËø∑Ë∑Ø„Éá„Éº„Çø„ÇíÂèñÂæó
    const currentDisplayMaze = allMazeData[selectedMazeOwner] || mazeData;
    
    // „ÉÅ„É£„ÉÉ„Éà„É°„ÉÉ„Çª„Éº„Ç∏„ÅÆË™≠„ÅøËæº„Åø
    useEffect(() => {
        if (!gameData?.id) return;
        
        const chatCollRef = collection(db, `artifacts/${appId}/public/data/labyrinthGames/${gameData.id}/reviewChatMessages`);
        const chatQuery = query(chatCollRef, orderBy('timestamp', 'asc'), limit(100));
        
        const unsubscribe = onSnapshot(chatQuery, (snapshot) => {
            const messages = snapshot.docs.map(doc => ({
                id: doc.id,
                ...doc.data()
            }));
            setChatMessages(messages);
        });
        
        return () => unsubscribe();
    }, [gameData?.id]);

    // „ÉÅ„É£„ÉÉ„Éà„É°„ÉÉ„Çª„Éº„Ç∏ÈÄÅ‰ø°
    const handleSendChatMessage = async () => {
        if (!chatInput.trim() || !gameData?.id) return;
        
        const chatCollRef = collection(db, `artifacts/${appId}/public/data/labyrinthGames/${gameData.id}/reviewChatMessages`);
        
        try {
            await addDoc(chatCollRef, {
                senderId: userId,
                senderName: currentUserName,
                text: chatInput,
                timestamp: serverTimestamp()
            });
            setChatInput("");
        } catch (error) {
            console.error("Error sending review chat message:", error);
        }
    };
    
    if (!gameData || !gameData.playerStates) {
        return (
            <div className="max-w-7xl mx-auto p-4 bg-gray-100 min-h-screen">
                <div className="text-center">
                    <p className="text-gray-500">„Éá„Éº„Çø„ÇíË™≠„ÅøËæº„Åø‰∏≠...</p>
                </div>
            </div>
        );
    }

    const currentPlayerState = gameData.playerStates[userId];

    return (
        <div className="max-w-7xl mx-auto p-4 bg-gray-100 min-h-screen">
            {/* „Éò„ÉÉ„ÉÄ„Éº */}
            <div className="bg-white rounded-lg shadow-md p-4 mb-4">
                <div className="flex justify-between items-center">
                    <h1 className="text-2xl font-bold text-gray-800 flex items-center">
                        <RotateCcw size={24} className="mr-2 text-blue-600"/>
                        ÊÑüÊÉ≥Êà¶„É¢„Éº„Éâ - ÂÖ®‰ΩìÊåØ„ÇäËøî„Çä
                    </h1>
                    <button
                        onClick={onExit}
                        className="bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded flex items-center"
                    >
                        <ArrowLeft size={16} className="mr-2"/>
                        ÁµÇ‰∫Ü
                    </button>
                </div>
                
                <div className="mt-4 p-3 bg-blue-50 rounded-lg">
                    <h3 className="font-semibold text-blue-800 mb-2">üéâ „Ç≤„Éº„É†ÁµêÊûú</h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        {players.map((playerId, index) => {
                            const playerState = gameData.playerStates[playerId];
                            const playerName = playerId === userId ? currentUserName : `„Éó„É¨„Ç§„É§„Éº${index + 1}`;
                            
                            return (
                                <div key={playerId} className="bg-white p-3 rounded border">
                                    <div className="flex items-center justify-between">
                                        <span className="font-semibold">{playerName}</span>
                                        {playerState?.goalTime && (
                                            <span className="text-green-600 font-bold">„Ç¥„Éº„É´ÈÅîÊàê!</span>
                                        )}
                                    </div>
                                    <div className="text-sm text-gray-600 mt-1">
                                        <p>„Çπ„Ç≥„Ç¢: {playerState?.score || 0}pt</p>
                                        <p>Áô∫Ë¶ã„Çª„É´Êï∞: {Object.keys(playerState?.revealedCells || {}).length}</p>
                                        {playerState?.goalTime && (
                                            <p className="text-green-600">
                                                „Ç¥„Éº„É´ÊôÇÂàª: {new Date(playerState.goalTime.seconds * 1000).toLocaleTimeString()}
                                            </p>
                                        )}
                                    </div>
                                </div>
                            );
                        })}
                    </div>
                </div>
            </div>

            <div className="grid grid-cols-1 lg:grid-cols-3 gap-4">
                {/* Ëø∑Ë∑ØÂÖ®‰Ωì„Éì„É•„Éº */}
                <div className="lg:col-span-2">
                    <div className="bg-white rounded-lg shadow-md p-4">
                        <div className="flex justify-between items-center mb-4">
                            <h2 className="text-lg font-semibold flex items-center">
                                <Map size={20} className="mr-2"/>
                                Ëø∑Ë∑ØÂÖ®‰ΩìÂõ≥ÔºàÂÖ®„Å¶„ÅÆÂ£Å„ÇíË°®Á§∫Ôºâ
                            </h2>
                            
                            {/* Ëø∑Ë∑ØÈÅ∏ÊäûUI */}
                            <div className="flex items-center space-x-2">
                                <span className="text-sm text-gray-600">Ë°®Á§∫„Åô„ÇãËø∑Ë∑Ø:</span>
                                <select
                                    value={selectedMazeOwner}
                                    onChange={(e) => setSelectedMazeOwner(e.target.value)}
                                    className="px-3 py-1 border border-gray-300 rounded text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
                                >
                                    {players.map((playerId, index) => {
                                        const playerName = playerId === userId ? currentUserName : `„Éó„É¨„Ç§„É§„Éº${index + 1}`;
                                        return (
                                            <option key={playerId} value={playerId}>
                                                {playerName}„ÅÆËø∑Ë∑Ø
                                            </option>
                                        );
                                    })}
                                </select>
                            </div>
                        </div>
                        
                        {currentDisplayMaze && (
                            <div className="relative">
                                {/* Â∫ßÊ®ô„É©„Éô„É´ */}
                                <div className="mb-2">
                                    <div className="flex justify-center">
                                        <div className="grid grid-cols-6 gap-1 w-fit">
                                            {['A', 'B', 'C', 'D', 'E', 'F'].map((letter) => (
                                                <div key={letter} className="w-8 h-6 flex items-center justify-center text-sm font-semibold text-gray-600">
                                                    {letter}
                                                </div>
                                            ))}
                                        </div>
                                    </div>
                                </div>
                                
                                <div className="flex justify-center">
                                    <div className="flex flex-col mr-2">
                                        {[1, 2, 3, 4, 5, 6].map((number) => (
                                            <div key={number} className="w-6 h-8 flex items-center justify-center text-sm font-semibold text-gray-600">
                                                {number}
                                            </div>
                                        ))}
                                    </div>
                                    
                                    <MazeGrid
                                        mazeData={{
                                            ...currentDisplayMaze,
                                            walls: currentDisplayMaze.walls || [] // ÂÖ®„Å¶„ÅÆÂ£Å„ÇíË°®Á§∫
                                        }}
                                        playerPosition={currentPlayerState?.position}
                                        otherPlayers={players.filter(p => p !== userId).map(p => ({
                                            id: p,
                                            position: gameData.playerStates[p]?.position,
                                            name: p === userId ? currentUserName : `„Éó„É¨„Ç§„É§„Éº${players.indexOf(p) + 1}`
                                        }))}
                                        revealedCells={currentPlayerState?.revealedCells || {}}
                                        revealedPlayerWalls={currentDisplayMaze.walls || []} // ÂÖ®„Å¶„ÅÆÂ£Å„ÇíË°®Á§∫
                                        onCellClick={() => {}}
                                        gridSize={6}
                                        sharedWalls={[]}
                                        highlightPlayer={true}
                                        smallView={false}
                                        showAllWalls={true} // ÂÖ®„Å¶„ÅÆÂ£Å„ÇíË°®Á§∫„Åô„Çã„Éï„É©„Ç∞
                                    />
                                </div>
                                
                                {/* Ëø∑Ë∑ØÊÉÖÂ†± */}
                                <div className="mt-4 p-3 bg-blue-50 rounded">
                                    <h4 className="font-semibold text-blue-800 mb-2">
                                        {selectedMazeOwner === userId ? currentUserName : `„Éó„É¨„Ç§„É§„Éº${players.indexOf(selectedMazeOwner) + 1}`}„ÅÆËø∑Ë∑Ø
                                    </h4>
                                    <div className="text-sm text-blue-700 space-y-1">
                                        <p>‚Ä¢ Á∑èÂ£ÅÊï∞: {currentDisplayMaze.walls?.length || 0}ÂÄã</p>
                                        <p>‚Ä¢ „Ç¥„Éº„É´‰ΩçÁΩÆ: ({currentDisplayMaze.goal?.r || 0}, {currentDisplayMaze.goal?.c || 0})</p>
                                        <p>‚Ä¢ ‰ΩúÊàêËÄÖ: {selectedMazeOwner === userId ? currentUserName : `„Éó„É¨„Ç§„É§„Éº${players.indexOf(selectedMazeOwner) + 1}`}</p>
                                    </div>
                                </div>
                            </div>
                        )}
                        
                        {!currentDisplayMaze && (
                            <div className="text-center py-8 text-gray-500">
                                <Map size={48} className="mx-auto mb-4 opacity-50"/>
                                <p>Ëø∑Ë∑Ø„Éá„Éº„Çø„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì</p>
                            </div>
                        )}
                        
                        {/* „Éó„É¨„Ç§„É§„Éº„ÅÆËªåË∑°ÊÉÖÂ†± */}
                        <div className="mt-4 p-3 bg-gray-50 rounded">
                            <h4 className="font-semibold mb-2">„Éó„É¨„Ç§„É§„Éº„ÅÆÂãï„Åç</h4>
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-2 text-sm">
                                {players.map((playerId, index) => {
                                    const playerState = gameData.playerStates[playerId];
                                    const playerName = playerId === userId ? currentUserName : `„Éó„É¨„Ç§„É§„Éº${index + 1}`;
                                    const revealedCount = Object.keys(playerState?.revealedCells || {}).length;
                                    
                                    return (
                                        <div key={playerId} className="flex justify-between">
                                            <span>{playerName}:</span>
                                            <span className="text-blue-600">{revealedCount}„Çª„É´Êé¢Á¥¢</span>
                                        </div>
                                    );
                                })}
                            </div>
                        </div>
                    </div>
                </div>

                {/* „ÉÅ„É£„ÉÉ„Éà„ÉªÊÑüÊÉ≥Êà¶„Ç®„É™„Ç¢ */}
                <div className="lg:col-span-1">
                    <div className="bg-white rounded-lg shadow-md p-4">
                        <h2 className="text-lg font-semibold mb-4 flex items-center">
                            <MessageSquare size={20} className="mr-2"/>
                            ÊÑüÊÉ≥Êà¶„ÉÅ„É£„ÉÉ„Éà
                        </h2>
                        
                        {/* „ÉÅ„É£„ÉÉ„Éà„É°„ÉÉ„Çª„Éº„Ç∏ */}
                        <div 
                            className="h-64 overflow-y-auto border rounded-lg p-3 mb-4 bg-gray-50"
                            ref={chatLogRef}
                        >
                            {chatMessages.length === 0 ? (
                                <div className="text-center text-gray-500 py-8">
                                    <MessageSquare size={32} className="mx-auto mb-2 opacity-50"/>
                                    <p>„Åæ„Å†„É°„ÉÉ„Çª„Éº„Ç∏„Åå„ÅÇ„Çä„Åæ„Åõ„Çì</p>
                                    <p className="text-sm">ÊÑüÊÉ≥„Çí„Ç∑„Çß„Ç¢„Åó„Åæ„Åó„Çá„ÅÜÔºÅ</p>
                                </div>
                            ) : (
                                <div className="space-y-2">
                                    {chatMessages.map((msg) => (
                                        <div 
                                            key={msg.id} 
                                            className={`p-2 rounded-lg max-w-[80%] ${
                                                msg.senderId === userId 
                                                    ? 'bg-blue-100 text-blue-800 ml-auto' 
                                                    : 'bg-white border'
                                            }`}
                                        >
                                            <div className="text-xs text-gray-500 mb-1">
                                                {msg.senderName}
                                            </div>
                                            <div className="text-sm">{msg.text}</div>
                                        </div>
                                    ))}
                                </div>
                            )}
                        </div>
                        
                        {/* „ÉÅ„É£„ÉÉ„ÉàÂÖ•Âäõ */}
                        <div className="flex space-x-2">
                            <input
                                type="text"
                                value={chatInput}
                                onChange={(e) => setChatInput(e.target.value)}
                                onKeyPress={(e) => e.key === 'Enter' && handleSendChatMessage()}
                                placeholder="ÊÑüÊÉ≥„ÇíÂÖ•Âäõ..."
                                className="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                            />
                            <button
                                onClick={handleSendChatMessage}
                                disabled={!chatInput.trim()}
                                className="bg-blue-500 text-white px-3 py-2 rounded-lg hover:bg-blue-600 disabled:bg-gray-300 disabled:cursor-not-allowed"
                            >
                                <Send size={16}/>
                            </button>
                        </div>
                        
                        {/* ÊÑüÊÉ≥„ÉÜ„É≥„Éó„É¨„Éº„Éà */}
                        <div className="mt-4 space-y-2">
                            <h4 className="text-sm font-semibold text-gray-700">ÊÑüÊÉ≥„ÉÜ„É≥„Éó„É¨„Éº„Éà:</h4>
                            <div className="grid grid-cols-1 gap-1">
                                {[
                                    "Èù¢ÁôΩ„ÅÑ„Ç≤„Éº„É†„Åß„Åó„ÅüÔºÅ",
                                    "Ëø∑Ë∑Ø„ÅÆË®≠Ë®à„ÅåÂ∑ßÂ¶ô„Åß„Åó„Åü",
                                    "„Åæ„Åü„Éó„É¨„Ç§„Åó„Åæ„Åó„Çá„ÅÜÔºÅ",
                                    "ËâØ„ÅÑÊà¶Áï•„Åß„Åó„Åü„Å≠",
                                    "Ê¨°Âõû„ÅØË≤†„Åë„Åæ„Åõ„ÇìÔºÅ"
                                ].map((template, index) => (
                                    <button
                                        key={index}
                                        onClick={() => setChatInput(template)}
                                        className="text-left text-xs text-blue-600 hover:text-blue-800 hover:bg-blue-50 p-1 rounded"
                                    >
                                        "{template}"
                                    </button>
                                ))}
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            {/* ÊåØ„ÇäËøî„Çä„Ç®„É™„Ç¢ */}
            <div className="bg-white rounded-lg shadow-md p-4 mt-4">
                <h3 className="text-lg font-semibold mb-3 flex items-center">
                    <Eye size={18} className="mr-2"/>
                    „Ç≤„Éº„É†ÂàÜÊûê
                </h3>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <div>
                        <h4 className="font-semibold text-gray-700 mb-2">Ëø∑Ë∑Ø„ÅÆÁâπÂæ¥</h4>
                        <ul className="text-sm text-gray-600 space-y-1">
                            <li>‚Ä¢ Á∑èÂ£ÅÊï∞: {currentDisplayMaze?.walls?.length || 0}ÂÄã</li>
                            <li>‚Ä¢ Ëø∑Ë∑ØË§áÈõëÂ∫¶: ‰∏≠Á®ãÂ∫¶</li>
                            <li>‚Ä¢ „Ç¥„Éº„É´Âà∞ÈÅîÁéá: {players.filter(p => gameData.playerStates[p]?.goalTime).length}/{players.length}</li>
                        </ul>
                    </div>
                    <div>
                        <h4 className="font-semibold text-gray-700 mb-2">„Éó„É¨„Ç§„É§„ÉºÂàÜÊûê</h4>
                        <ul className="text-sm text-gray-600 space-y-1">
                            <li>‚Ä¢ Âπ≥ÂùáÊé¢Á¥¢„Çª„É´Êï∞: {Math.round(players.reduce((sum, p) => sum + Object.keys(gameData.playerStates[p]?.revealedCells || {}).length, 0) / players.length)}</li>
                            <li>‚Ä¢ ÊúÄÈ´ò„Çπ„Ç≥„Ç¢: {Math.max(...players.map(p => gameData.playerStates[p]?.score || 0))}</li>
                            <li>‚Ä¢ Êé¢Á¥¢ÂäπÁéá: ËâØÂ•Ω</li>
                        </ul>
                    </div>
                    <div>
                        <h4 className="font-semibold text-gray-700 mb-2">ÊîπÂñÑ„Éù„Ç§„É≥„Éà</h4>
                        <ul className="text-sm text-gray-600 space-y-1">
                            <li>‚Ä¢ „Çà„ÇäÂäπÁéáÁöÑ„Å™Êé¢Á¥¢„É´„Éº„Éà</li>
                            <li>‚Ä¢ Êà¶Áï•ÁöÑ„Å™Ëø∑Ë∑ØË®≠Ë®à</li>
                            <li>‚Ä¢ „Éó„É¨„Ç§„É§„ÉºÈñì„ÅÆÈßÜ„ÅëÂºï„Åç</li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default ReviewModeScreen;
